# AUTOGENERATED! DO NOT EDIT! File to edit: 01_main.ipynb (unless otherwise specified).

__all__ = ['OptionCuda']

# Cell
import my_python_code.library_notebook as funcs


# Cell
class _McSettings(ctypes.Structure):
    _fields_ = [('num_trials', ctypes.c_int),
                ('time_steps', ctypes.c_int),
                ('block_size', ctypes.c_int),
                ('mu', ctypes.c_float),
                ('sigma', ctypes.c_float),
                ('initial_price', ctypes.c_float),
                ('strike', ctypes.c_float),
                ('rfr', ctypes.c_float),
                ('verbose', ctypes.c_bool),
                ('seed', ctypes.c_int),
                ]


class OptionCuda(OptionBase):
    """
    Limitations : Different from pure python version.  I don't pass back all trials from device to host
      as thats inefficient and only used for random walk visuals.
    """

    # Required to access CUDA Kernel data structures

    def __init__(self, block_size=1024, **kwargs):
        super().__init__(**kwargs)
        self.block_size = block_size
        self.mode = "cuda"
        self.device = 0
        self.mc_so_path = "/home/dvanstee/projects/2021-03-montecarlo/nbs/mc_option.so"
        self.cfg = _McSettings(
            num_trials=self.num_trials,
            time_steps=self.time_steps,
            block_size=self.block_size,
            mu=self.mu,
            sigma=self.sigma,
            initial_price=self.initial_price,
            strike=self.strike,
            rfr=self.rfr,
            verbose=self.verbose,
            seed=self.seed)

    def print_mcSettings(self):
        for k, v in self.cfg._fields_:
            print("{:10s} {}".format(k, self.cfg.__getattribute__(k)))

    def run_monte_carlo(self, mc_mode: str = "options"):
        """
        Only mc_mode = options supported.
        """
        assert mc_mode == "options" or mc_mode == "prices"
        rv_tuple = (None, None)
        MonteCarlo = ctypes.cdll.LoadLibrary(self.mc_so_path)
        if mc_mode == "options":
            MonteCarlo.run_monte_carlo_cuda.restype = ndpointer(dtype=ctypes.c_float, shape=(2 * self.cfg.time_steps))
            mc_call_put_cuda = MonteCarlo.run_monte_carlo_cuda(self.cfg, mc_mode)
            call_option_prices = mc_call_put_cuda[0:self.cfg.time_steps]
            put_option_prices = mc_call_put_cuda[self.cfg.time_steps:2 * self.cfg.time_steps]
            rv_tuple = (call_option_prices, put_option_prices)
        else:
            MonteCarlo.run_monte_carlo_cuda.restype = ndpointer(dtype=ctypes.c_float,
                                                                shape=(self.cfg.time_steps * self.cfg.num_trials))
            mc_call_put_cuda = MonteCarlo.run_monte_carlo_cuda(self.cfg, mc_mode)
            rv_tuple = (mc_call_put_cuda, None)  # just price paths...

        return rv_tuple

    def get_option_expectation(self):
        """
        implicit_input : monte_carlo price paths (from self.run_monte_carlo)
        output : tuple(call_expectations, put_expectations)
          call_expectations in a numpy array of shape (timesteps, )
          put_expectations in a numpy array of shape (timesteps, )
        """

        option_prices = self.run_monte_carlo(mc_mode="options")
        return option_prices